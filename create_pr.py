#!/usr/bin/env python3
"""
Catalyst PR Creation Script
Part of the Helix ⇄ Catalyst automation system
"""

import os
import time
import base64
import requests
import jwt
import subprocess
import shlex
from datetime import datetime


class GitHubAppAuth:
    """Handles GitHub App authentication (JWT ➜ installation token)."""

    def __init__(self, app_id: str, private_key_path: str, installation_id: str):
        self.app_id = app_id
        self.private_key_path = private_key_path
        self.installation_id = installation_id

    def _generate_jwt(self) -> str:
        with open(self.private_key_path, "r") as fp:
            private_key = fp.read()

        now = int(time.time())
        payload = {"iat": now - 60, "exp": now + 600, "iss": self.app_id}
        return jwt.encode(payload, private_key, algorithm="RS256")

    def installation_token(self) -> str:
        jwt_token = self._generate_jwt()
        headers = {
            "Authorization": f"Bearer {jwt_token}",
            "Accept": "application/vnd.github+json",
        }
        url = (
            f"https://api.github.com/app/installations/"
            f"{self.installation_id}/access_tokens"
        )
        res = requests.post(url, headers=headers)
        res.raise_for_status()
        return res.json()["token"]


def create_automated_pr():
    print("🤖  Catalyst PR automation starting…")

    # ── Configuration ─────────────────────────────────────────────────────────────
    app_id = os.getenv("GITHUB_APP_ID", "1488433")
    installation_id = os.getenv("GITHUB_APP_INSTALLATION_ID", "73774755")
    private_key_path = os.getenv("GITHUB_APP_PRIVATE_KEY_PATH")
    repo = os.getenv("GITHUB_REPO", "chybertech/catalyst-test")

    if not private_key_path:
        raise ValueError("GITHUB_APP_PRIVATE_KEY_PATH env-var is required")

    print(f"📦  Repo: {repo}")
    print(f"🔑  App ID: {app_id}")
    print(f"🏷️  Installation ID: {installation_id}")

    # ── Auth ─────────────────────────────────────────────────────────────────────
    token = GitHubAppAuth(app_id, private_key_path, installation_id).installation_token()
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/vnd.github+json",
    }
    print("✅  GitHub App authentication OK")

    # ── Branch creation ──────────────────────────────────────────────────────────
    ts_slug = datetime.now().strftime("%Y%m%d-%H%M%S")
    branch_name = f"catalyst/autopr-demo-{ts_slug}"
    print(f"🌿  Creating branch {branch_name}")

    # fetch main SHA
    main_ref_url = f"https://api.github.com/repos/{repo}/git/ref/heads/main"
    main_sha = requests.get(main_ref_url, headers=headers).json()["object"]["sha"]
    print(f"📍  main SHA = {main_sha[:8]}")

    # create new branch
    ref_url = f"https://api.github.com/repos/{repo}/git/refs"
    requests.post(
        ref_url,
        headers=headers,
        json={"ref": f"refs/heads/{branch_name}", "sha": main_sha},
    ).raise_for_status()

    # ── File payload ─────────────────────────────────────────────────────────────
    timestamp_iso = datetime.now().isoformat()
    md_body = f"""# Catalyst Automation Test

**Generated by**: Catalyst (Claude-powered agent)  
**Timestamp**: {timestamp_iso}  
**Branch**: {branch_name}  
**Repository**: {repo}

This PR validates the end-to-end Helix ⇄ Catalyst workflow.

## ✅ Capabilities tested
- GitHub App auth (JWT ➜ installation token)
- Branch creation
- File commit
- Pull-request creation

---

🤖 *Automated by Catalyst*
"""
    encoded = base64.b64encode(md_body.encode()).decode()

    file_url = f"https://api.github.com/repos/{repo}/contents/AUTOMATION_TEST.md"
    requests.put(
        file_url,
        headers=headers,
        json={
            "message": f"🤖 Catalyst automation test: {timestamp_iso}",
            "content": encoded,
            "branch": branch_name,
        },
    ).raise_for_status()

    # ── PR creation ──────────────────────────────────────────────────────────────
    pr_title = f"🤖 Catalyst Automation Validation – {ts_slug}"
    pr_resp = requests.post(
        f"https://api.github.com/repos/{repo}/pulls",
        headers=headers,
        json={
            "title": pr_title,
            "head": branch_name,
            "base": "main",
            "body": md_body,
        },
    )
    pr_resp.raise_for_status()
    pr = pr_resp.json()

    # ── Auto-merge request ───────────────────────────────────────────
    try:
        subprocess.run(
            shlex.split(
                f"gh pr merge {pr['number']} --auto --squash --repo {repo}"
            ),
            check=True,
        )
        print("🔄  Auto-merge enabled (will trigger once CI passes).")
    except subprocess.CalledProcessError as err:
        print("⚠️  Could not enable auto-merge —", err)

    # ── Output ──────────────────────────────────────────────────────────────────
    print("\n🎉  AUTOMATION SUCCESS")
    print("────────────────────────────────────────────────────────")
    print(f"PR   : {pr['html_url']}")
    print(f"Branch: {branch_name}")
    print(f"Number: #{pr['number']}")
    print("────────────────────────────────────────────────────────\n")
    return pr


if __name__ == "__main__":
    try:
        create_automated_pr()
    except Exception as exc:
        print(f"\n❌  Automation failed: {exc}")
        raise